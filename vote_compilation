#!/usr/bin/env python3

import hashlib
import json
import os
from datetime import datetime

# File to store votes securely
VOTE_FILE = "votes.json"
# File to store the audit trail
AUDIT_TRAIL_FILE = "audit_trail.log"

# vote_compilation.py

class VotingSystem:
    def __init__(self):
        self.votes = []

    def add_vote(self, candidate):
        self.votes.append({'candidate': candidate})

    def count_votes(self):
        vote_count = {}
        for vote in self.votes:
            candidate = vote.get('candidate')  # Use .get() to safely retrieve 'candidate'
            if candidate in vote_count:
                vote_count[candidate] += 1
            else:
                vote_count[candidate] = 1
        return vote_count

def main():
    voting_system = VotingSystem()

    # Simulating votes being added (replace with actual input logic as needed)
    voting_system.add_vote('Candidate A')
    voting_system.add_vote('Candidate B')
    voting_system.add_vote('Candidate A')
    voting_system.add_vote('Candidate C')
    voting_system.add_vote('Candidate A')

    # Count and print the current vote count
    try:
        vote_count = voting_system.count_votes()
        print("Current vote count:")
        for candidate, count in vote_count.items():
            print(f"{candidate}: {count}")
    except KeyError as e:
        print(f"Error: Missing key {e}")

if __name__ == "__main__":
    main()

