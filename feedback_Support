#!/usr/bin/env python3

import hashlib
import json
import os
from datetime import datetime

# Constants for file paths
VOTE_FILE = "votes.json"
AUDIT_TRAIL_FILE = "audit_trail.log"
INCIDENT_LOG_FILE = "incident_log.log"
FEEDBACK_FILE = "feedback.json"

class VotingSystem:
    def __init__(self):
        self.votes = []
        self.voting_period_ended = False
        self.load_votes()

    def load_votes(self):
        try:
            if os.path.exists(VOTE_FILE):
                with open(VOTE_FILE, 'r') as f:
                    self.votes = json.load(f)
                    if self.votes and self.votes[-1].get('finalized'):
                        self.voting_period_ended = True
        except Exception as e:
            print(f"Error loading votes: {e}")
            # Optionally, handle the exception or log it

    def save_votes(self):
        try:
            with open(VOTE_FILE, 'w') as f:
                json.dump(self.votes, f, indent=4)
        except Exception as e:
            print(f"Error saving votes: {e}")
            # Optionally, handle the exception or log it

    def hash_vote(self, vote):
        vote_str = json.dumps(vote, sort_keys=True)
        return hashlib.sha256(vote_str.encode('utf-8')).hexdigest()

    def record_vote(self, voter_id, candidate):
        if self.voting_period_ended:
            print("Voting period has ended. No more votes can be recorded.")
            self.log_incident("Attempted vote after voting period ended", voter_id)
            return
        
        vote = {
            'voter_id': voter_id,
            'candidate': candidate,
            'timestamp': datetime.now().isoformat(),
            'finalized': False  # Indicates if vote is finalized
        }
        
        self.votes.append(vote)
        self.save_votes()
        print(f"Vote recorded successfully for candidate: {candidate}")

    def log_audit_trail(self, action):
        try:
            with open(AUDIT_TRAIL_FILE, 'a') as f:
                log_entry = f"{datetime.now().isoformat()} - {action}\n"
                f.write(log_entry)
        except Exception as e:
            print(f"Error logging audit trail: {e}")

    def log_incident(self, message, voter_id):
        try:
            with open(INCIDENT_LOG_FILE, 'a') as f:
                log_entry = f"{datetime.now().isoformat()} - Incident: {message}, Voter ID: {voter_id}\n"
                f.write(log_entry)
        except Exception as e:
            print(f"Error logging incident: {e}")

    def log_feedback(self, feedback):
        try:
            with open(FEEDBACK_FILE, 'a') as f:
                feedback_entry = json.dumps(feedback) + '\n'
                f.write(feedback_entry)
        except Exception as e:
            print(f"Error logging feedback: {e}")

    def display_message(self, message):
        print(message)


def main():
    voting_system = VotingSystem()

    # Example usage
    voter_id = "12345"
    candidate = "Candidate A"
    voting_system.record_vote(voter_id, candidate)

    # Example logging
    action = f"Vote recorded for candidate: {candidate} by voter ID: {voter_id}"
    voting_system.log_audit_trail(action)

    # Example feedback logging
    feedback = {
        'voter_id': voter_id,
        'message': "I like the voting interface!"
    }
    voting_system.log_feedback(feedback)

if __name__ == "__main__":
    main()

