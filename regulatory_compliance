#!/usr/bin/env python3

import hashlib
import json
import os
from datetime import datetime

# File to store votes securely
VOTE_FILE = "votes.json"
# File to store the audit trail
AUDIT_TRAIL_FILE = "audit_trail.log"
# File to store the incident logs
INCIDENT_LOG_FILE = "incident_log.log"

class VotingSystem:
    def __init__(self):
        self.votes = []
        self.voting_period_ended = False
        self.load_votes()

    def load_votes(self):
        if os.path.exists(VOTE_FILE):
            with open(VOTE_FILE, 'r') as f:
                self.votes = json.load(f)
                # Check if the voting period has ended
                if self.votes and self.votes[-1].get('finalized'):
                    self.voting_period_ended = True

    def save_votes(self):
        with open(VOTE_FILE, 'w') as f:
            json.dump(self.votes, f)

    def hash_vote(self, vote):
        vote_str = json.dumps(vote, sort_keys=True)
        return hashlib.sha256(vote_str.encode('utf-8')).hexdigest()

    def record_vote(self, voter_id, candidate):
        if self.voting_period_ended:
            self.display_message("Voting period has ended. No more votes can be recorded.")
            self.log_incident("Attempted vote after voting period ended", voter_id)
            return

        if not voter_id or not candidate:
            self.display_message("Invalid input. Voter ID and candidate are required.")
            self.log_incident("Invalid vote attempt", voter_id)
            return

        vote = {
            'voter_id': voter_id,
            'candidate': candidate,
            'timestamp': datetime.utcnow().isoformat()
        }
        vote_hash = self.hash_vote(vote)
        vote['hash'] = vote_hash

        self.votes.append(vote)
        self.save_votes()
        self.log_audit("Vote recorded", vote)
        self.display_message(f"Vote recorded for {candidate} by voter {voter_id}.")

    def log_audit(self, action, details):
        audit_entry = {
            'action': action,
            'details': details,
            'timestamp': datetime.utcnow().isoformat()
        }
        with open(AUD

